name: Deploy
on:
  push:
    branches:
      - qa
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       node-version: [16.x]    
    steps:
      - uses: actions/checkout@master
        with:
          node-version: ${{ matrix.node-version }}
      - name: Decrypt large secret
        run: gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output /home/runner/work/email-service/email-service/.env /home/runner/work/email-service/email-service/.github/qa.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Access for gitmodules
        env:
          SSH_KEY_GITMODULES: ${{secrets.SSH_KEY_GITMODULES}}
        run: |
          mkdir $HOME/.ssh
          echo "$SSH_KEY_GITMODULES" > $HOME/.ssh/id_rsa
          chmod 400 $HOME/.ssh/id_rsa   
          cat $HOME/.ssh/id_rsa
      - name: submodule init
        run: git submodule init
      - name: update --init
        run: git submodule update --init 
      - working-directory: ./src/database/db-models
        run: git checkout qa  
      - working-directory: ./src/common-services
        run: git checkout qa
      - run: npm install    
      - run: npm run build 
      - run: cp package.json build
      - run: cp package-lock.json build
      - run: cp .env build

      - name: upload image to ECR
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          dockerfile: /home/runner/work/email-service/email-service/infra/docker/Dockerfile
          image: email
          tags: ${{ github.sha }}
          registry: 834772772058.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
          

      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          cat $HOME/.kube/config
      - name: Install helm
        run: |
          curl -LO <https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz>
          tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version
      #- name: Lint helm charts
        #run: helm lint /home/runner/work/email-service/email-service/infra/helm/
      - name: Deploy Helm
        run: helm upgrade --install --atomic --timeout 5m qa-email-chart /home/runner/work/email-service/email-service/infra/helm/ -f /home/runner/work/email-service/email-service/infra/helm/qa.values.yaml --namespace qa-email-ns --create-namespace --set deployment.containers.version=${{ github.sha }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}